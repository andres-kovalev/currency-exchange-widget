{"version":3,"sources":["components/ErrorMessage/ErrorMessage.module.scss","components/NumberField/NumberField.module.scss","components/Exchange/Exchange.module.scss","hooks/useDerivedState.ts","hooks/useUpdate.ts","helper/math.ts","components/NumberField/NumberField.tsx","components/ErrorMessage/ErrorMessage.tsx","components/Exchange/state/reducer.ts","components/Exchange/state/types.ts","components/Exchange/state/actions.ts","services/rateService.ts","store/reducer.ts","store/types.ts","store/actions.ts","store/useActions.ts","hooks/useActionCreators.ts","store/index.ts","components/Exchange/Exchange.tsx","hooks/useStore.ts","helper/asyncTimer.ts","components/Routes/Routes.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useDerivedState","callback","initialValue","state","useRef","update","useState","setState","useCallback","useUpdate","newState","current","value","createRoundFunction","roundFunction","precision","base","round","Math","bind","floor","formatRegExp","NumberField","onChange","sign","invalid","props","normalizedValue","normalizeValue","restoreValue","formatValue","toString","formattedValue","setFormattedValue","inputProps","className","cx","styles","TextField","placeholder","target","extractedValue","extractValue","match","newValue","Number","isNaN","parseFloat","replace","fixLeadingZeroes","defaultProps","signRegExp","anchorOrigin","vertical","horizontal","ErrorMessage","open","autoHideDuration","message","onClose","Snackbar","SnackbarContent","container","aria-describedby","id","icon","errorIcon","action","IconButton","key","aria-label","color","onClick","Close","type","payload","setCurrency","produce","draft","Object","assign","source","destination","rate","active","amount","primaryType","currency","secondaryType","setSourceCurrency","setDestinationCurrency","swapCurrencies","setSourceAmount","setDestinationAmount","setRate","getRate","a","async","fetch","response","ok","Error","status","json","data","rates","initialState","pockets","exchange","useActions","actions","dispatch","useDispatch","useMemo","bindActionCreators","useActionCreators","currencies","sourceInfoClasses","pocket","info","smallPanelClasses","panel","small","largePanelClasses","large","rateButtonClasses","panelButton","medium","destinationClasses","destinationInfoClasses","pocketsSelector","renderCurrency","MenuItem","Exchange","reducer","actionCreators","useReducer","useStore","handleSourceCurrencyChange","event","handleDestinationCurrencyChange","errorMessage","setErrorMessage","closeError","useEffect","timeout","timeoutId","run","setTimeout","clearTimeout","createAsyncTimer","RateService","console","error","useSelector","sourceAvailable","destinationAvailable","exchangeAllSource","exchangeAllDestination","isReady","isValid","orderedCurrencies","filter","map","concat","Fragment","grid","Select","FormHelperText","balance","right","size","SwapVert","Button","variant","alert","TrendingUp","FormControl","fullWidth","footer","wide","disabled","Routes","path","to","store","createStore","App","StylesProvider","injectFirst","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9172b687.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorMessage_container__33evi\",\"message\":\"ErrorMessage_message__qjfBA\",\"icon\":\"ErrorMessage_icon__20NKA\",\"errorIcon\":\"ErrorMessage_errorIcon__23cvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"invalid\":\"NumberField_invalid__3HuTz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Exchange_grid__dhg4q\",\"pocket\":\"Exchange_pocket__hXhKI\",\"info\":\"Exchange_info__2UILs\",\"balance\":\"Exchange_balance__2h2Yw\",\"panel\":\"Exchange_panel__3WrRe\",\"small\":\"Exchange_small__3FT8U\",\"large\":\"Exchange_large__3QwvD\",\"destination\":\"Exchange_destination__Srpsq\",\"footer\":\"Exchange_footer__3PIuV\",\"medium\":\"Exchange_medium__SGcqZ\",\"wide\":\"Exchange_wide__vDJPJ\",\"panelButton\":\"Exchange_panelButton__c92ci\",\"active\":\"Exchange_active__3PUMy\",\"right\":\"Exchange_right__3sWxq\"};","import { useRef, useCallback } from 'react';\nimport useUpdate from './useUpdate';\n\ntype Optional<T> = T | undefined;\n\ntype DerivedStateCallback<T> = (state?: T) => Optional<T>;\n\ntype SetStateFunction<T> = (state: T) => void;\n\n/**\n * Custom hook to implement behaviour similar to static getDerivedStateFromProps()\n */\nexport default function useDerivedState<T>(\n    callback: DerivedStateCallback<T>,\n    initialValue?: T\n): [ Optional<T>, SetStateFunction<T> ] {\n    const state = useRef(initialValue);\n    const update = useUpdate();\n    const newState = callback(state.current);\n\n    if (state.current !== newState) {\n        state.current = newState;\n    }\n\n    const setState = useCallback((value: T) => {\n        if (state.current === value) {\n            return;\n        }\n\n        state.current = value;\n\n        update();\n    }, [ update ]);\n\n    return [ state.current, setState ];\n}\n","import { useState, useCallback } from 'react';\n\n/**\n * Custom hook to provide forceUpdate() function\n */\nexport default function useUpdate(): () => void {\n    const [ , setState ] = useState(0);\n\n    return useCallback(() => setState(\n        (state) => state + 1\n    ), []);\n}\n","type RoundFunction = (value: number) => number;\n\nconst createRoundFunction = (roundFunction: RoundFunction) =>\n    (value: number, precision = 2): number => {\n        const base = 10 ** precision;\n\n        return roundFunction(value * base) / base;\n    };\n\nexport const round = createRoundFunction(Math.round.bind(Math));\n\nexport const floor = createRoundFunction(Math.floor.bind(Math));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { TextField } from '@material-ui/core';\n\nimport styles from './NumberField.module.scss';\n\nimport { useDerivedState } from '../../hooks';\nimport { floor } from '../../helper/math';\n\ntype Sign = '-' | '+';\n\ninterface NumberFieldProps {\n    onChange?: (value: number) => void;\n    value?: number;\n    sign?: Sign;\n    invalid?: boolean;\n}\n\nconst formatRegExp = /^([+-]\\s)?\\d+(\\.\\d{0,2})?$/;\n\n/**\n * Separate component to input numbers - responsible for correct number format\n */\nconst NumberField: React.FC<NumberFieldProps> = ({ onChange, sign, value, invalid, ...props }) => {\n    const normalizedValue = normalizeValue(value);\n    /**\n     * We hold formatted value in local state (instead of formatting each time original value)\n     * to let user enter dot ('1.') and leading decimal zeroes ('1.0')\n     */\n    const [ formattedValue, setFormattedValue ] = useDerivedState<string>(\n        (state) => (restoreValue(state) === normalizedValue\n            ? state\n            : formatValue(normalizedValue.toString(), sign)),\n        ''\n    );\n\n    const handleValueChange: React.ChangeEventHandler<HTMLInputElement> = ({ target }) => {\n        const extractedValue = extractValue(target.value);\n\n        if (extractedValue && !target.value.match(formatRegExp)) {\n            return;\n        }\n\n        const newValue = restoreValue(extractedValue);\n        setFormattedValue(formatValue(extractedValue, sign));\n\n        if (newValue === normalizedValue) {\n            return;\n        }\n\n        if (onChange) {\n            onChange(newValue);\n        }\n    };\n\n    const inputProps = {\n        className: cx({\n            [styles.invalid]: !!invalid\n        })\n    };\n\n    return (\n        <TextField\n            placeholder=\"0\"\n            { ...props }\n            inputProps={inputProps}\n            value={ formattedValue }\n            onChange={ handleValueChange }\n        />\n    );\n};\n\nNumberField.propTypes = {\n    onChange: PropTypes.func,\n    sign: PropTypes.oneOf([ '+', '-' ]),\n    value: PropTypes.number,\n    invalid: PropTypes.bool\n};\n\nNumberField.defaultProps = {\n    invalid: false\n};\n\n/**\n * Normalizes value by removing all decimals except first two\n */\nfunction normalizeValue(value = 0): number {\n    const normalizedValue = floor(value);\n\n    return Number.isNaN(normalizedValue)\n        ? 0\n        : normalizedValue;\n}\n\n/**\n * Generates value to put into input field\n * - adds sign to non-zero values\n * - returns empty string for zero to let input field to show placeholder\n */\nfunction formatValue(value: string, sign?: Sign): string {\n    return parseFloat(value)\n        ? `${sign} ${fixLeadingZeroes(value)}`\n        : '';\n}\n\nconst signRegExp = /^([+-]\\s)?(.*)$/;\n\n/**\n * Removes sign from formatted value\n */\nfunction extractValue(value: string): string {\n    const match = value.match(signRegExp);\n\n    if (!match) {\n        return '';\n    }\n\n    return match[2];\n}\n\n/**\n * Restores normalized value from formatted one\n */\nfunction restoreValue(value = ''): number {\n    return normalizeValue(parseFloat(extractValue(value)));\n}\n\n/**\n * Removes leading zeroes\n */\nfunction fixLeadingZeroes(value: string): string {\n    return value.toString().replace(/^(0(?!\\.))+/, '');\n}\n\nexport default NumberField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Snackbar, SnackbarContent, IconButton } from '@material-ui/core';\nimport { Error, Close } from '@material-ui/icons';\n\nimport styles from './ErrorMessage.module.scss';\n\ntype VerticalAlignment = 'top' | 'bottom';\ntype HorizontalAlignment = 'left' | 'right' | 'center';\n\ninterface SnackbarAnchorOrigin {\n    vertical: VerticalAlignment;\n    horizontal: HorizontalAlignment;\n}\n\nconst anchorOrigin: SnackbarAnchorOrigin = {\n    vertical: 'top',\n    horizontal: 'center'\n};\n\ninterface ErrorMessageProps {\n    open?: boolean;\n    autoHideDuration?: number;\n    message: string;\n    onClose: () => void;\n}\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({\n    open = false,\n    autoHideDuration = 3000,\n    message, onClose\n}) => (\n    <Snackbar\n        anchorOrigin={ anchorOrigin }\n        open={open}\n        autoHideDuration={autoHideDuration}\n        onClose={onClose}\n    >\n        <SnackbarContent\n            className={styles.container}\n            aria-describedby=\"error-message\"\n            message={\n                <span id=\"error-message\" className={styles.message}>\n                    <Error className={cx(styles.icon, styles.errorIcon)} />\n                    { message }\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={ onClose }\n                >\n                    <Close className={styles.icon} />\n                </IconButton>\n            ]}\n        />\n    </Snackbar>\n);\n\nErrorMessage.propTypes = {\n    open: PropTypes.bool,\n    autoHideDuration: PropTypes.number,\n    message: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nexport default ErrorMessage;\n","import produce from 'immer';\nimport { AnyAction } from 'redux';\n\nimport {\n    SET_SOURCE_CURRENCY,\n    SET_DESTINATION_CURRENCY,\n    SET_SOURCE_AMOUNT,\n    SET_DESTINATION_AMOUNT,\n    SWAP_CURRENCIES,\n    SET_RATE\n} from './types';\nimport { round } from '../../../helper/math';\n\nexport interface Pocket {\n    currency: string;\n    amount: number;\n}\n\nexport type PocketType = 'source' | 'destination';\n\nexport interface State {\n    source: Pocket;\n    destination: Pocket;\n    active: PocketType;\n    rate: number;\n}\n\nexport default (state: State, { type, payload }: AnyAction): State => {\n    switch (type) {\n        case SET_SOURCE_CURRENCY:\n            return setCurrency(state, 'source', payload);\n        case SET_DESTINATION_CURRENCY:\n            return setCurrency(state, 'destination', payload);\n        case SWAP_CURRENCIES:\n            return produce(state, (draft: State): void => {\n                /* eslint-disable no-param-reassign */\n                Object.assign(draft, {\n                    source: draft.destination,\n                    destination: draft.source,\n                    rate: 0,\n                    active: draft.active === 'source'\n                        ? 'destination'\n                        : 'source'\n                });\n                /* eslint-enable no-param-reassign */\n            });\n        case SET_SOURCE_AMOUNT:\n            return produce(state, (draft: State) => {\n                /* eslint-disable no-param-reassign */\n                draft.source.amount = payload;\n                draft.destination.amount = round(payload * draft.rate);\n                draft.active = 'source';\n                /* eslint-enable no-param-reassign */\n            });\n        case SET_DESTINATION_AMOUNT:\n            return produce(state, (draft: State) => {\n                /* eslint-disable no-param-reassign */\n                draft.source.amount = round(payload / draft.rate);\n                draft.destination.amount = payload;\n                draft.active = 'destination';\n                /* eslint-enable no-param-reassign */\n            });\n        case SET_RATE:\n            return produce(state, (draft: State) => {\n                /* eslint-disable no-param-reassign */\n                if (draft.active === 'source') {\n                    draft.destination.amount = round(draft.source.amount * payload);\n                } else {\n                    draft.source.amount = round(draft.destination.amount / payload);\n                }\n\n                draft.rate = payload;\n                /* eslint-enable no-param-reassign */\n            });\n        default:\n            return state;\n    }\n};\n\nfunction setCurrency(state: State, primaryType: PocketType, currency: string): State {\n    const secondaryType = primaryType === 'source'\n        ? 'destination'\n        : 'source';\n\n    return produce(state, (draft: State): void => {\n        /* eslint-disable no-param-reassign */\n        if (draft[secondaryType].currency === currency) {\n            draft[secondaryType].currency = draft[primaryType].currency;\n        }\n\n        draft[primaryType].currency = currency;\n\n        draft.rate = 0;\n        /* eslint-enable no-param-reassign */\n    });\n}\n","export const SET_SOURCE_CURRENCY = 'SET_SOURCE_CURRENCY';\nexport const SET_DESTINATION_CURRENCY = 'SET_DESTINATION_CURRENCY';\nexport const SWAP_CURRENCIES = 'SWAP_CURRENCIES';\nexport const SET_SOURCE_AMOUNT = 'SET_SOURCE_AMOUNT';\nexport const SET_DESTINATION_AMOUNT = 'SET_DESTINATION_AMOUNT';\nexport const SET_RATE = 'SET_RATE';\n","import { ActionCreator, Action } from 'redux';\n\nimport {\n    SET_SOURCE_CURRENCY,\n    SET_SOURCE_AMOUNT,\n    SWAP_CURRENCIES,\n    SET_DESTINATION_AMOUNT,\n    SET_DESTINATION_CURRENCY,\n    SET_RATE\n} from './types';\n\ntype SimpleAction = Action<string>;\n\ninterface ActionWithPayload<T> extends Action<string> {\n    payload: T;\n}\n\ntype ActionCreatorFunction<T> = ActionCreator<ActionWithPayload<T>>;\n\nexport const setSourceCurrency: ActionCreatorFunction<string> = (currency: string) => ({\n    type: SET_SOURCE_CURRENCY,\n    payload: currency\n});\n\nexport const setDestinationCurrency: ActionCreatorFunction<string> = (currency: string) => ({\n    type: SET_DESTINATION_CURRENCY,\n    payload: currency\n});\n\nexport const swapCurrencies: ActionCreator<SimpleAction> = () => ({\n    type: SWAP_CURRENCIES\n});\n\nexport const setSourceAmount: ActionCreatorFunction<number> = (amount: number) => ({\n    type: SET_SOURCE_AMOUNT,\n    payload: amount\n});\n\nexport const setDestinationAmount: ActionCreatorFunction<number> = (amount: number) => ({\n    type: SET_DESTINATION_AMOUNT,\n    payload: amount\n});\n\nexport const setRate: ActionCreatorFunction<number> = (rate: number) => ({\n    type: SET_RATE,\n    payload: Math.round(rate * 10000) / 10000\n});\n","import { round } from '../helper/math';\n\nconst BASE_URL = 'https://api.ratesapi.io/api/latest';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getRate = async (source: string, destination: string): Promise<number> => {\n    const response = await fetch(`${BASE_URL}?base=${source}&symbols=${destination}`);\n\n    if (!response.ok) {\n        throw new Error(`Unable to get rates (response status: ${response.status})!`);\n    }\n\n    const data = await response.json();\n\n    return round(data.rates[destination], 4);\n};\n","import { AnyAction } from 'redux';\nimport produce from 'immer';\n\nimport { EXCHANGE } from './types';\nimport { round } from '../helper/math';\n\nexport interface Pockets {\n    [key: string]: number;\n}\n\nexport interface GlobalState {\n    pockets: Pockets;\n}\n\nconst initialState = {\n    pockets: {}\n};\n\nexport default (\n    state: GlobalState = initialState,\n    { type, payload }: AnyAction\n): GlobalState => {\n    switch (type) {\n        case EXCHANGE: {\n            const { source, destination } = payload;\n\n            if (source.amount > (state.pockets[source.currency] || 0)) {\n                return state;\n            }\n\n            return produce(state, ({ pockets }: { pockets: Pockets }) => {\n                /* eslint-disable no-param-reassign */\n                pockets[source.currency] = round(pockets[source.currency] - source.amount);\n                pockets[destination.currency] = round(\n                    (pockets[destination.currency] || 0) + destination.amount\n                );\n                /* eslint-enable no-param-reassign */\n            });\n        }\n        default:\n            return state;\n    }\n};\n","// eslint-disable-next-line import/prefer-default-export\nexport const EXCHANGE = 'EXCHANGE';\n","import { Action } from 'redux';\nimport { EXCHANGE } from './types';\n\ninterface Source {\n    currency: string;\n    amount: number;\n}\n\ninterface Payload {\n    source: Source;\n    destination: Source;\n}\n\ninterface ExchangeAction extends Action {\n    payload: Payload;\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const exchange = (source: Source, destination: Source): ExchangeAction => ({\n    type: EXCHANGE,\n    payload: { source, destination }\n});\n","import { useActionCreators } from '../hooks';\nimport * as actions from './actions';\n\n/**\n * Custom hook to get bound action creators (memoized)\n */\nexport default function useActions(): typeof actions {\n    return useActionCreators(actions);\n}\n","import { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { bindActionCreators, ActionCreatorsMapObject } from 'redux';\n\n/**\n * Custom hook to memoize bound action creators\n */\nexport default function useActionCreators<T, M extends ActionCreatorsMapObject<T>>(actions: M): M {\n    const dispatch = useDispatch();\n\n    return useMemo(\n        () => bindActionCreators(actions, dispatch),\n        [ actions, dispatch ]\n    );\n}\n","import { createStore, Store, AnyAction } from 'redux';\nimport reducer, { GlobalState } from './reducer';\n\nexport { default as useActions } from './useActions';\n\nexport default (initialState: GlobalState): Store<GlobalState, AnyAction> =>\n    createStore(reducer, initialState);\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { Select, MenuItem, FormHelperText, Button, IconButton, FormControl } from '@material-ui/core';\nimport { SwapVert, TrendingUp } from '@material-ui/icons';\n\nimport styles from './Exchange.module.scss';\n\nimport { useStore } from '../../hooks';\nimport reducer, { State } from './state/reducer';\nimport * as actionCreators from './state/actions';\nimport createAsyncTimer from '../../helper/asyncTimer';\nimport * as RateService from '../../services/rateService';\nimport { useActions } from '../../store';\nimport currencies from '../../const/currencies.json';\nimport { NumberField, ErrorMessage } from '..';\nimport { GlobalState, Pockets } from '../../store/reducer';\n\nconst TIMEOUT = 10000;\n\nconst initialState: State = {\n    source: {\n        /*\n            let's assume our currencies ordered by priority:\n            1st - user currency, 2nd-4th - common currencies (EUR, GBP, USD), 5th-... - rest\n         */\n        currency: currencies[0],\n        amount: 0\n    },\n    destination: {\n        currency: currencies[1],\n        amount: 0\n    },\n    active: 'source',\n    rate: 0\n};\n\nconst sourceInfoClasses = cx(styles.pocket, styles.info);\nconst smallPanelClasses = cx(styles.panel, styles.small);\nconst largePanelClasses = cx(styles.panel, styles.large);\nconst rateButtonClasses = cx(styles.panelButton, styles.medium);\nconst destinationClasses = cx(styles.pocket, styles.destination);\nconst destinationInfoClasses = cx(styles.pocket, styles.info, styles.destination);\n\nconst Exchange: React.FC = () => {\n    // there is no need to pollute global storage with widget local state, so let's leave it here\n    const [ state, actions ] = useStore(reducer, actionCreators, initialState);\n    const handleSourceCurrencyChange = useCallback(\n        (event: React.ChangeEvent<{ value: unknown }>) =>\n            actions.setSourceCurrency(event.target.value as string),\n        [ actions ]\n    );\n    const handleDestinationCurrencyChange = useCallback(\n        (event: React.ChangeEvent<{ value: unknown }>) =>\n            actions.setDestinationCurrency(event.target.value as string),\n        [ actions ]\n    );\n\n    const openHistory = (): void => {\n        // eslint-disable-next-line\n        alert('Not implemented yet.');\n    };\n\n    const [ errorMessage, setErrorMessage ] = useState('');\n    const closeError = useCallback(\n        () => setErrorMessage(''),\n        []\n    );\n\n    useEffect(() => createAsyncTimer(\n        async () => {\n            try {\n                const rate = await RateService.getRate(\n                    state.source.currency,\n                    state.destination.currency\n                );\n\n                actions.setRate(rate);\n            } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n\n                setErrorMessage('Unable to get rates. Try later!');\n            }\n        }, TIMEOUT\n    ), [ state.source.currency, state.destination.currency, actions ]);\n\n    const pockets = useSelector(pocketsSelector);\n\n    const sourceAvailable: number = pockets[state.source.currency] || 0;\n    const destinationAvailable: number = pockets[state.destination.currency] || 0;\n\n    const exchangeAllSource = useCallback(\n        () => actions.setSourceAmount(sourceAvailable),\n        [ actions, sourceAvailable ]\n    );\n    const exchangeAllDestination = useCallback(\n        () => actions.setDestinationAmount(destinationAvailable),\n        [ actions, destinationAvailable ]\n    );\n\n    const { exchange } = useActions();\n    const handleExchangeClick = (): void => {\n        exchange(state.source, state.destination);\n    };\n\n    const isReady = state.source.amount > 0 && state.rate > 0;\n    const isValid = state.source.amount <= sourceAvailable;\n\n    // reorder currencies to show active first\n    const orderedCurrencies = useMemo(\n        () => currencies\n            .filter(\n                (currency) => currency in pockets\n            ).map(\n                (currency) => renderCurrency(currency, styles.active)\n            )\n            .concat(\n                currencies\n                    .filter(\n                        (currency) => !(currency in pockets)\n                    ).map(\n                        (currency) => renderCurrency(currency)\n                    )\n            ),\n        [ pockets ]\n    );\n\n    return (\n        <React.Fragment>\n            <div className={ styles.grid }>\n                <div className={ styles.pocket }>\n                    <Select\n                        value={ state.source.currency }\n                        onChange={ handleSourceCurrencyChange }\n                        aria-label=\"Source currency\"\n                    >\n                        { orderedCurrencies }\n                    </Select>\n                    <NumberField\n                        sign='-'\n                        value={ state.source.amount }\n                        onChange={ actions.setSourceAmount }\n                        invalid={ !isValid }\n                        aria-label=\"Source amount\"\n                    />\n                </div>\n                <div className={ sourceInfoClasses }>\n                    <FormHelperText\n                        className={ styles.balance }\n                        onClick={ exchangeAllSource }\n                    >\n                        { `Available: ${sourceAvailable} ${state.source.currency}` }\n                    </FormHelperText>\n                    { !isValid && <FormHelperText className={ styles.right }>\n                        Insufficient funds\n                    </FormHelperText> }\n                </div>\n                <div className={ smallPanelClasses }>\n                    <IconButton\n                        color=\"secondary\"\n                        className={ styles.panelButton }\n                        size=\"small\"\n                        onClick={ actions.swapCurrencies }\n                        aria-label=\"Swap currencies\"\n                    >\n                        <SwapVert />\n                    </IconButton>\n                </div>\n                <div className={ largePanelClasses }>\n                    <Button\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                        className={ rateButtonClasses }\n                        size=\"small\"\n                        onClick={ openHistory }\n                        aria-label=\"Show history\"\n                    >\n                        <TrendingUp /> { `1 ${state.source.currency} = ${state.rate || '?'} ${state.destination.currency}` }\n                    </Button>\n                </div>\n                <div className={ destinationClasses }>\n                    <Select\n                        value={ state.destination.currency }\n                        onChange={ handleDestinationCurrencyChange }\n                        aria-label=\"Destination currency\"\n                    >\n                        { orderedCurrencies }\n                    </Select>\n                    <FormControl fullWidth>\n                        <NumberField\n                            sign='+'\n                            value={ state.destination.amount }\n                            onChange={ actions.setDestinationAmount }\n                            aria-label=\"Destination amount\"\n                        />\n                    </FormControl>\n                </div>\n                <div className={ destinationInfoClasses }>\n                    <FormHelperText\n                        className={ styles.balance }\n                        onClick={ exchangeAllDestination }\n                    >\n                        { `Available: ${destinationAvailable} ${state.destination.currency}` }\n                    </FormHelperText>\n                </div>\n                <div className={ styles.footer }>\n                    <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        size=\"large\"\n                        className={ styles.wide }\n                        onClick={ handleExchangeClick }\n                        disabled={ !isReady || !isValid }\n                    >\n                        Exchange\n                    </Button>\n                </div>\n            </div>\n            <ErrorMessage\n                open={ !!errorMessage }\n                message={ errorMessage }\n                onClose={ closeError }\n            />\n        </React.Fragment>\n    );\n};\n\nfunction pocketsSelector({ pockets }: GlobalState): Pockets {\n    return pockets;\n}\n\nfunction renderCurrency(currency: string, className?: string): React.ReactElement {\n    return (\n        <MenuItem\n            key={ currency }\n            value={ currency }\n            className={ className }\n        >\n            { currency }\n        </MenuItem>\n    );\n}\n\nexport default Exchange;\n","import { useReducer, useMemo } from 'react';\nimport { bindActionCreators, ActionCreatorsMapObject, Dispatch } from 'redux';\n\n/**\n * Custom hook - wrapper above useReducer() to bind action creators\n */\nexport default function useStore<T, M extends ActionCreatorsMapObject<T>, S>(\n    reducer: React.Reducer<S, T>,\n    actionCreators: M, initialState: S\n): [ S, M ] {\n    const [ state, dispatch ] = useReducer(reducer, initialState);\n\n    const boundActionCreators = useMemo(\n        () => bindActionCreators(actionCreators, dispatch as Dispatch),\n        /*\n            there is no need to add dispatch as a dependency\n            since React guarantees that dispatch function identity\n            is stable and won’t change on re-renders\n        */\n        [ actionCreators ]\n    );\n\n    return [ state, boundActionCreators ];\n}\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AsyncFunction = () => Promise<any>;\n\n/**\n * Function to create a timer calling async function with provided interval\n */\nexport default function createAsyncTimer(callback: AsyncFunction, timeout: number): () => void {\n    let active = true;\n    let timeoutId: NodeJS.Timeout;\n\n    const run = async (): Promise<void> => {\n        await callback();\n\n        if (active) {\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            timeoutId = setTimeout(run, timeout);\n        }\n    };\n\n    run();\n\n    return (): void => {\n        active = false;\n\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    };\n}\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { Exchange } from '..';\n\nconst Routes: React.FC = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route path='/currency-exchange-widget/exchange'>\n                <Exchange />\n            </Route>\n            {/* since no screens implemented except exchange we need to redirect */}\n            <Route path='/'>\n                <Redirect to=\"/currency-exchange-widget/exchange\" />\n            </Route>\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport configureStore from '../../store';\nimport { Routes } from '..';\nimport pockets from '../../const/pockets.json';\n\nconst store = configureStore({ pockets });\n\nconst App: React.FC = () => (\n    <StylesProvider injectFirst>\n        <Provider store={ store }>\n            <Routes />\n        </Provider>\n    </StylesProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost.\n                // Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    // eslint-disable-next-line no-console\n                    console.log(\n                        'This web app is being served cache-first by a service '\n                            + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = (): void => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = (): void => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            // eslint-disable-next-line no-console\n                            console.log(\n                                'New content is available and will be used when all '\n                                    + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            // eslint-disable-next-line no-console\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            // eslint-disable-next-line no-console\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n                || (contentType != null && !contentType.includes('javascript'))\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            // eslint-disable-next-line no-console\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister(): void {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}